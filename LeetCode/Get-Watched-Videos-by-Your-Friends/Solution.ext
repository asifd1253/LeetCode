class Solution {
    class Pair implements Comparable<Pair> {
        String video;
        int freq;

        Pair(String video, int freq) {
            this.video = video;
            this.freq = freq;
        }

        public int compareTo(Pair that) {
            if (this.freq == that.freq) {
                return this.video.compareTo(that.video);
            }
            return this.freq - that.freq;
        }
    }

    public List<String> watchedVideosByFriends(List<List<String>> watchedVideos, int[][] friends, int id, int level) {
        Queue<Integer> q = new LinkedList<>();
        HashSet<Integer> visited = new HashSet<>();
        q.add(id);
        int curLevel = 0;
        visited.add(id);
        while (!q.isEmpty()) {
            int size = q.size();
            // iterate level by level
            for (int i = 0; i < size; i++) {
                int curId = q.remove();
                for (int friend : friends[curId]) {
                    if (!visited.contains(friend)) {
                        visited.add(friend);
                        q.add(friend);
                    }
                }
            }
            curLevel++;
            if (curLevel == level) {
                break;
            }
        }

        HashMap<String, Integer> freq = new HashMap<>();
        while (!q.isEmpty()) {
            int curId = q.remove();
            for (String video : watchedVideos.get(curId)) {
                freq.put(video, freq.getOrDefault(video, 0) + 1);
            }
        }

        List<Pair> videoList = new ArrayList<>();
        for (String video : freq.keySet()) {
            videoList.add(new Pair(video, freq.get(video)));
        }

        Collections.sort(videoList);

        List<String> res = new ArrayList<>();
        for (Pair pair : videoList) {
            res.add(pair.video);
        }

        return res;
    }
}